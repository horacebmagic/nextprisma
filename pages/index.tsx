import type { InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import { DeleteIcon } from "../components/Icon";
import TodoList from "../components/TodoList";
import { Prisma, PrismaClient, Todo } from "@prisma/client";

const prisma = new PrismaClient();

export const getServerSideProps = async () => {
  const todos: Todo[] = await prisma.todo.findMany();
  return {
    props: {
      initialTodos: todos,
    },
  };
};

const Home = ({
  initialTodos,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  useEffect(() => {
    document
      ?.querySelector("body")
      ?.classList.add(
        "bg-gradient-to-r",
        "from-indigo-500",
        "via-violet-500",
        "to-purple-500"
      );
  });

  const [newTodo, setNewTodo] = useState<Prisma.TodoCreateInput>({
    task: "",
    created_at: new Date().toDateString(),
    finished_at: "not yet",
  });
  const [todos, setTodos] = useState<Todo[]>(initialTodos);

  const submit = async (newTodo: Prisma.TodoCreateInput) => {
    if (newTodo.task === "") {
      throw new Error("Fill the task field");
    }

    setNewTodo({ ...newTodo, task: "" });

    const res = await fetch("/api/todo", {
      method: "POST",
      body: JSON.stringify(newTodo),
    });

    if (!res.ok) {
      throw new Error(res.statusText);
    }

    return await res.json();
  };

  const toggleEdit = async (todo_p: Todo) => {
    const updateIsEditing: Todo[] = todos.map((todo) => {
      if (todo.id === todo_p.id) {
        return { ...todo, isEditing: !todo_p.isEditing };
      }
      return todo;
    });

    setTodos(updateIsEditing);

    const res = await fetch("/api/todo/is_editing", {
      method: "PUT",
      body: JSON.stringify(todo_p),
    });

    if (!res.ok) {
      throw new Error(res.statusText);
    }

    return await res.json();
  };

  const toggleFinished = async (todo_p: Todo) => {
    const updateIsFinished: Todo[] = todos.map((todo) => {
      if (todo.id === todo_p.id) {
        return { ...todo, isFinished: !todo_p.isFinished };
      }
      return todo;
    });

    setTodos(updateIsFinished);

    const res = await fetch("/api/todo/is_finished", {
      method: "PUT",
      body: JSON.stringify(todo_p),
    });

    if (!res.ok) {
      throw new Error(res.statusText);
    }

    return await res.json();
  };

  const deleteTodo = async (id: number) => {
    setTodos(todos.filter((todo) => todo.id !== id));

    const res = await fetch("/api/todo", {
      method: "DELETE",
      body: JSON.stringify(id),
    });

    if (!res.ok) {
      throw new Error(res.statusText);
    }

    return await res.json();
  };

  const updateTodo = async (id: number, task: string) => {
    const updateIsEditing: Todo[] = todos.map((todo) => {
      if (todo.id === id) {
        return { ...todo, task: task, isEditing: false };
      }
      return todo;
    });

    setTodos(updateIsEditing);

    const res = await fetch("/api/todo", {
      method: "PUT",
      body: JSON.stringify({ id, task }),
    });

    if (!res.ok) {
      throw new Error(res.statusText);
    }

    return await res.json();
  };

  const reset = () => {};

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col justify-center items-center h-screen space-y-2 px-1">
        <div className="lg:w-4/12">
          <div className="text-2xl text-white font-semibold text-center">
            Todo App
          </div>
        </div>
        <div className="w-full lg:w-4/12 space-y-2">
          {todos &&
            todos.map((todo, index) => (
              <TodoList
                key={todo.id}
                todo={todo}
                index={index}
                deleteTodo={deleteTodo}
                toggleEdit={toggleEdit}
                toggleFinished={toggleFinished}
                updateTodo={updateTodo}
              />
            ))}
        </div>
        <div className="w-full lg:w-4/12">
          <form
            onSubmit={async (e) => {
              e.preventDefault();
              try {
                const res: Todo = await submit(newTodo);
                setTodos([...todos, res]);
              } catch (error) {
                console.log(error);
              }
            }}
          >
            <input
              type="text"
              placeholder="Enter to add new task..."
              className="w-full text-white bg-indigo-500 shadow-sm border border-indigo-400 rounded-md py-1 px-2 cursor-default font-light bg-opacity-30 hover:bg-opacity-60 outline-none"
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setNewTodo({
                  task: e.target.value,
                  created_at: new Date().toLocaleString(),
                  finished_at: "not yet",
                })
              }
              value={newTodo.task}
            />
          </form>
        </div>
        <div v-if="store.getTodos.length > 0" className="w-full lg:w-4/12">
          <button
            className="cursor-default flex items-center space-x-2 text-white"
            onClick={reset}
          >
            <DeleteIcon /> Delete All
          </button>
        </div>
      </div>
    </>
  );
};

export default Home;
